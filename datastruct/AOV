#include <iostream>
#include <stdlib.h>
using namespace std;
typedef struct node
{
    int e;
    struct node*next;
}LinkStackNode,*LinkList;
void InitStack(LinkList &top)
{
    top=(LinkList)malloc(sizeof(LinkStackNode));
    top->next=NULL;
}
int IsEmpty(LinkList &top)
{
    if(top->next==NULL)
        return true;
    else
        return false;
}
int Push(LinkList &top,int x)
{
    LinkStackNode*temp;
    temp=(LinkList)malloc(sizeof(LinkStackNode));
    if(temp==NULL) return false;
    temp->e=x;
    temp->next=top->next;
    top->next=temp;
    return true;
}
int Pop(LinkList &top,int*x)
{
    LinkStackNode*temp;
    temp=top->next;
    if(temp==NULL) return false;
    top->next=temp->next;
    *x=temp->e;
    free(temp);
    return true;
}
typedef struct ArcNode
{
    int adjvex;
    struct ArcNode *nextarc;
}ArcNdoe;
typedef struct VertexNode
{
    int data;
    ArcNdoe*firstarc;
}VertexNode;
typedef struct
{
    VertexNode vertex[51];
    int vexnum,arcnmu;
}AdjList;
void GetG(AdjList*G)
{
    int i,j,a;
    cin>>G->vexnum;
    for(i=0;i<G->vexnum;i++)
    {
        G->vertex[i].data=i;
        G->vertex[i].firstarc=(ArcNdoe*)malloc(sizeof(ArcNdoe));
        G->vertex[i].firstarc->nextarc=NULL;
    }
    for(i=0;i<G->vexnum;i++)
    {
        for(j=0;j<G->vexnum;j++)
        {
            cin>>a;
            if(a==1)
            {
                ArcNdoe*p,*q;
                q=G->vertex[i].firstarc;
                while(q->nextarc!=NULL)
                {
                    q=q->nextarc;
                }
                p=(ArcNdoe*)malloc(sizeof(ArcNdoe));
                p->adjvex=j;
                p->nextarc=NULL;
                q->nextarc=p;
            }
        }
    }
}
void FindID(AdjList G,int indegree[])
{
    int i;
    ArcNdoe*p;
    for(i=0;i<G.vexnum;i++)
        indegree[i]=0;
    for(i=0;i<G.vexnum;i++)
    {
        p=G.vertex[i].firstarc;
        while(p->nextarc!=NULL)
        {
            indegree[p->nextarc->adjvex]++;
            p=p->nextarc;
        }
    }
}
void TopoSort(AdjList G)
{
    LinkList S;
    int indegree[51];
    int mark[51];
    int i,count=0,k,j=0;
    ArcNdoe*p;
    FindID(G,indegree);
    InitStack(S);
    for(i=0;i<G.vexnum;i++)
    {
        if(indegree[i]==0)
        {
            Push(S,i);
        }
    }
    while(!IsEmpty(S))
    {
        Pop(S,&i);
        mark[j++]=G.vertex[i].data;
        count++;
        p=G.vertex[i].firstarc->nextarc;
        while(p!=NULL)
        {
            k=p->adjvex;
            indegree[k]--;
            if(indegree[k]==0)
            {
                Push(S,k);
            }
            p=p->nextarc;
        }
    }
    if(count<G.vexnum) cout<<"ERROR"<<endl;
    else
        for(i=0;i<j;i++)
        cout<<mark[i]<<" ";
    cout<<endl;
}
int main()
{
    AdjList G;
    GetG(&G);
    TopoSort(G);
    return 0;
}
